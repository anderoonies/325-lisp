(defun rotate-array (arr)
  (let ((dim (array-dimensions arr)))
    (let ((width (car dim))
          (arr2 (make-array dim)))
      (do ((row 0 (1+ row)))
        ((= row width))
        (do ((col 0 (1+ col)))
          ((= col width))
          (setf (aref arr2 col (- width row 1))
                (aref arr row col))))
      arr2)))

(defun nrotate-array (arr)
  (let* ((width (car (array-dimensions arr)))
         (i (1- width)))
    (dotimes (col (floor width 2))
      (dotimes (row (- i (+ (* col 2))))
        (let ((pos (+ row col)))
          (rotatef (aref arr (- i pos) col)
                   (aref arr (- i col) (- i pos))
                   (aref arr pos (- i col))
                   (aref arr col pos)))))
    arr))
  
